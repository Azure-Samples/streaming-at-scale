// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.TimeSeriesInsights.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Categorical variable represents signal that needs to be analyzed based
    /// on the count or duration of occurrence of limited set of defined
    /// values.
    /// </summary>
    [Newtonsoft.Json.JsonObject("categorical")]
    public partial class CategoricalVariable : Variable
    {
        /// <summary>
        /// Initializes a new instance of the CategoricalVariable class.
        /// </summary>
        public CategoricalVariable()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the CategoricalVariable class.
        /// </summary>
        /// <param name="value">Value time series expression is used to
        /// represent the value of the signal that is going to be categorized.
        /// It can evaluate to only 'String' or 'Long' type for categorical
        /// variables.</param>
        /// <param name="filter">Filter over the events that restricts the
        /// number of events being considered for computation. Example:
        /// "$event.Status.String='Good'". Optional.</param>
        /// <param name="interpolation">Categorical variable supports only
        /// 'step' interpolation.</param>
        public CategoricalVariable(Tsx value, TimeSeriesDefaultCategory defaultCategory, Tsx filter = default(Tsx), Interpolation interpolation = default(Interpolation), IList<TimeSeriesAggregateCategory> categories = default(IList<TimeSeriesAggregateCategory>))
            : base(filter)
        {
            Value = value;
            Interpolation = interpolation;
            Categories = categories;
            DefaultCategory = defaultCategory;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets value time series expression is used to represent the
        /// value of the signal that is going to be categorized. It can
        /// evaluate to only 'String' or 'Long' type for categorical variables.
        /// </summary>
        [JsonProperty(PropertyName = "value")]
        public Tsx Value { get; set; }

        /// <summary>
        /// Gets or sets categorical variable supports only 'step'
        /// interpolation.
        /// </summary>
        [JsonProperty(PropertyName = "interpolation")]
        public Interpolation Interpolation { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "categories")]
        public IList<TimeSeriesAggregateCategory> Categories { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "defaultCategory")]
        public TimeSeriesDefaultCategory DefaultCategory { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public override void Validate()
        {
            base.Validate();
            if (Value == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Value");
            }
            if (DefaultCategory == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "DefaultCategory");
            }
            if (Value != null)
            {
                Value.Validate();
            }
            if (Categories != null)
            {
                foreach (var element in Categories)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
            if (DefaultCategory != null)
            {
                DefaultCategory.Validate();
            }
        }
    }
}
