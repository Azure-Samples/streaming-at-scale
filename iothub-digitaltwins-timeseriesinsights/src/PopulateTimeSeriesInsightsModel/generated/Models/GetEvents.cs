// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.TimeSeriesInsights.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Get Events query. Allows to retrieve raw events for a given Time Series
    /// ID and search span.
    /// </summary>
    public partial class GetEvents
    {
        /// <summary>
        /// Initializes a new instance of the GetEvents class.
        /// </summary>
        public GetEvents()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the GetEvents class.
        /// </summary>
        /// <param name="timeSeriesId">A single Time Series ID value that
        /// uniquely identifies a single time series instance (e.g. a device).
        /// Note that a single Time Series ID can be composite if multiple
        /// properties are specified as Time Series ID at environment creation
        /// time. The position and type of values must match Time Series ID
        /// properties specified on the environment and returned by Get Model
        /// Setting API. Cannot be null.</param>
        /// <param name="searchSpan">The range of time on which the query is
        /// executed. Cannot be null.</param>
        /// <param name="filter">Optional top-level filter for the query which
        /// will be applied to all the variables in the query. Example:
        /// "$event.Status.String='Good'".  Can be null.</param>
        /// <param name="projectedProperties">Projected properties is an array
        /// of properties which you want to project. These properties must
        /// appear in the events; otherwise, they are not returned.</param>
        /// <param name="take">Maximum number of property values in the whole
        /// response set, not the maximum number of property values per page.
        /// Defaults to 10,000 when not set. Maximum value of take can be
        /// 250,000.</param>
        public GetEvents(IList<object> timeSeriesId, DateTimeRange searchSpan, Tsx filter = default(Tsx), IList<EventProperty> projectedProperties = default(IList<EventProperty>), int? take = default(int?))
        {
            TimeSeriesId = timeSeriesId;
            SearchSpan = searchSpan;
            Filter = filter;
            ProjectedProperties = projectedProperties;
            Take = take;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets a single Time Series ID value that uniquely identifies
        /// a single time series instance (e.g. a device). Note that a single
        /// Time Series ID can be composite if multiple properties are
        /// specified as Time Series ID at environment creation time. The
        /// position and type of values must match Time Series ID properties
        /// specified on the environment and returned by Get Model Setting API.
        /// Cannot be null.
        /// </summary>
        [JsonProperty(PropertyName = "timeSeriesId")]
        public IList<object> TimeSeriesId { get; set; }

        /// <summary>
        /// Gets or sets the range of time on which the query is executed.
        /// Cannot be null.
        /// </summary>
        [JsonProperty(PropertyName = "searchSpan")]
        public DateTimeRange SearchSpan { get; set; }

        /// <summary>
        /// Gets or sets optional top-level filter for the query which will be
        /// applied to all the variables in the query. Example:
        /// "$event.Status.String='Good'".  Can be null.
        /// </summary>
        [JsonProperty(PropertyName = "filter")]
        public Tsx Filter { get; set; }

        /// <summary>
        /// Gets or sets projected properties is an array of properties which
        /// you want to project. These properties must appear in the events;
        /// otherwise, they are not returned.
        /// </summary>
        [JsonProperty(PropertyName = "projectedProperties")]
        public IList<EventProperty> ProjectedProperties { get; set; }

        /// <summary>
        /// Gets or sets maximum number of property values in the whole
        /// response set, not the maximum number of property values per page.
        /// Defaults to 10,000 when not set. Maximum value of take can be
        /// 250,000.
        /// </summary>
        [JsonProperty(PropertyName = "take")]
        public int? Take { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (TimeSeriesId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "TimeSeriesId");
            }
            if (SearchSpan == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "SearchSpan");
            }
            if (SearchSpan != null)
            {
                SearchSpan.Validate();
            }
            if (Filter != null)
            {
                Filter.Validate();
            }
        }
    }
}
