// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.TimeSeriesInsights.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Request to get search string suggestions for time series instances
    /// search based on prefix text.
    /// </summary>
    public partial class InstancesSuggestRequest
    {
        /// <summary>
        /// Initializes a new instance of the InstancesSuggestRequest class.
        /// </summary>
        public InstancesSuggestRequest()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the InstancesSuggestRequest class.
        /// </summary>
        /// <param name="searchString">Search string for which suggestions are
        /// required. Empty is allowed, but not null.</param>
        /// <param name="take">Maximum number of suggestions expected in the
        /// result. Defaults to 10 when not set.</param>
        public InstancesSuggestRequest(string searchString, int? take = default(int?))
        {
            SearchString = searchString;
            Take = take;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets search string for which suggestions are required.
        /// Empty is allowed, but not null.
        /// </summary>
        [JsonProperty(PropertyName = "searchString")]
        public string SearchString { get; set; }

        /// <summary>
        /// Gets or sets maximum number of suggestions expected in the result.
        /// Defaults to 10 when not set.
        /// </summary>
        [JsonProperty(PropertyName = "take")]
        public int? Take { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (SearchString == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "SearchString");
            }
        }
    }
}
